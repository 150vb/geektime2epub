# 背景

## python3 -m venv venv3 && source venv3/bin/activate 这条命令是干什么的？

`python3 -m venv venv3 && source venv3/bin/activate` 是一条在类 Unix 系统（如 Linux、macOS）终端中执行的命令，它由两个部分组成，通过逻辑与运算符 `&&` 连接，下面分别解释这两部分的作用。

### 1. `python3 -m venv venv3`
这部分命令的作用是创建一个 Python 虚拟环境。下面详细解释：
- `python3`：指定使用 Python 3 解释器来执行后续的操作。
- `-m venv`：`-m` 是 Python 的命令行选项，用于将一个模块作为脚本运行。`venv` 是 Python 3 内置的一个标准库模块，用于创建轻量级的虚拟环境。
- `venv3`：指定虚拟环境的名称和存储目录。执行该命令后，会在当前工作目录下创建一个名为 `venv3` 的文件夹，该文件夹包含虚拟环境所需的文件和目录结构，主要包括：
    - `bin` 目录：包含 Python 解释器的可执行文件以及激活虚拟环境的脚本。
    - `lib` 目录：包含虚拟环境中安装的 Python 库文件。
    - `include` 目录：包含 Python 头文件，用于编译 C 扩展模块。

### 2. `source venv3/bin/activate`
这部分命令的作用是激活刚刚创建的虚拟环境。下面详细解释：
- `source`：是一个 shell 内置命令，用于在当前 shell 环境中执行指定的脚本文件。通过 `source` 执行脚本，可以使脚本中的环境变量和函数等在当前 shell 会话中生效。
- `venv3/bin/activate`：指定要执行的脚本文件路径。`venv3` 是前面创建的虚拟环境的目录名，`bin` 是虚拟环境目录下的一个子目录，`activate` 是用于激活虚拟环境的脚本。

激活虚拟环境后，终端的命令提示符通常会发生变化，显示当前使用的虚拟环境名称（如 `(venv3)`）。此时，系统会将虚拟环境中的 Python 解释器和包管理器（如 `pip`）作为默认使用的工具，所有安装的 Python 包都会被安装到虚拟环境中，而不会影响系统级的 Python 环境。

### 示例
假设当前工作目录下没有 `venv3` 文件夹，执行该命令后，会先创建 `venv3` 虚拟环境，然后激活它。激活成功后，命令提示符可能会变成类似如下的形式：
```plaintext
(venv3) user@computer:~$
```

如果要退出虚拟环境，可以在终端中执行 `deactivate` 命令。


## 为什么pip3安装软件和运行py格式文件要先运行上面的命令？

并不是在使用 `pip3` 安装软件和运行 `.py` 格式文件时都必须先运行 `python3 -m venv venv3 && source venv3/bin/activate` 这条命令，不过在很多场景下这样做是有好处的，下面详细说明。

### 使用虚拟环境（运行上述命令）的好处

#### 1. 隔离项目依赖
不同的 Python 项目可能依赖于不同版本的 Python 库。例如，项目 A 可能需要 `Django` 版本 2.2，而项目 B 可能需要 `Django` 版本 3.2。如果将这些库都安装在系统全局环境中，会导致版本冲突，使得某些项目无法正常运行。

通过创建并激活虚拟环境，可以为每个项目创建一个独立的 Python 环境，每个环境都可以安装自己所需的特定版本的库，相互之间不会产生干扰。

**示例**：
假设你有两个项目 `project1` 和 `project2`，分别需要不同版本的 `numpy` 库。你可以为每个项目创建一个虚拟环境：
```bash
# 为 project1 创建并激活虚拟环境
python3 -m venv venv_project1
source venv_project1/bin/activate
pip install numpy==1.18.5

# 退出 project1 的虚拟环境
deactivate

# 为 project2 创建并激活虚拟环境
python3 -m venv venv_project2
source venv_project2/bin/activate
pip install numpy==1.21.0
```

#### 2. 避免全局环境污染
在系统全局环境中安装过多的 Python 库会使环境变得混乱，难以管理。而且，一些库可能会修改系统级的配置文件或环境变量，导致系统出现问题。

使用虚拟环境可以将项目的依赖限制在虚拟环境内部，不会对系统全局环境造成影响。当项目结束后，可以直接删除虚拟环境目录，不会留下任何残留文件。

#### 3. 便于项目的迁移和分享
虚拟环境包含了项目所需的所有依赖信息，通过将虚拟环境和项目代码一起分享给其他开发者，可以确保他们在相同的环境中运行项目，减少因环境差异导致的问题。

例如，你可以将项目代码和虚拟环境打包成一个压缩文件，分享给同事，同事只需要解压文件并激活虚拟环境，就可以直接运行项目。

### 不使用虚拟环境的情况
如果你的项目非常简单，只依赖于系统自带的 Python 库，或者所有依赖都可以与系统全局环境兼容，那么可以不使用虚拟环境，直接在系统全局环境中使用 `pip3` 安装软件和运行 `.py` 格式文件。

```bash
# 直接在系统全局环境中安装库
pip3 install requests

# 直接在系统全局环境中运行 Python 脚本
python3 my_script.py
```

综上所述，是否先运行创建并激活虚拟环境的命令取决于项目的具体需求和复杂度。在开发多个 Python 项目时，使用虚拟环境是一种良好的实践。

# 使用

1. 运行命令`python3 -m venv venv3 && source venv3/bin/activate`
2. 添加文件`./temp/cookie.tm`
3. 运行命令`pip3 install -r requirements.txt`
4. 运行命令`python3 start.py`
